import logging
import os
import sqlite3
from datetime import datetime
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from db import init_db, add_user, update_birthdate
from forecast import generate_forecast  # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≥–Ω–æ–∑–∞ —á–µ—Ä–µ–∑ GPT

BOT_TOKEN = os.environ.get("BOT_TOKEN")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username, user.first_name)
    await update.message.reply_text(
        f"üëÅ –ü—Ä–∏–≤–µ—Ç, {user.first_name}.
"
        "–¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Elara.
"
        "–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message.text.strip()

    try:
        birthdate = datetime.strptime(message, "%d.%m.%Y").date()
        update_birthdate(user.id, birthdate.isoformat())
        await update.message.reply_text(
            f"üóì –ó–∞–ø–∏—Å–∞–ª–∞ —Ç–≤–æ—é –¥–∞—Ç—É: {birthdate.strftime('%d.%m.%Y')}.
"
            "Elara —É—Å–ª—ã—à–∞–ª–∞. –°–µ–π—á–∞—Å –æ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è‚Ä¶"
        )

        await update.message.reply_text("üîÆ –ß—É–≤—Å—Ç–≤—É—é —Ç–≤–æ–π —Ä–∏—Ç–º... –°–ª—É—à–∞—é –ó–Ω–∞–∫–∏...")

        forecast = generate_forecast(birthdate.strftime('%d.%m.%Y'))
        await update.message.reply_text(forecast)

    except ValueError:
        await update.message.reply_text("üò∂ –Ø –Ω–µ –ø–æ–Ω—è–ª–∞... –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

def main():
    init_db()
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.run_polling()

if __name__ == "__main__":
    main()
